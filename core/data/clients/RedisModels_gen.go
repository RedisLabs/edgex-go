package clients

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *RedisEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "pushed":
			z.Pushed, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "device":
			z.Device, err = dc.ReadString()
			if err != nil {
				return
			}
		case "created":
			z.Created, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "modified":
			z.Modified, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "origin":
			z.Origin, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "event":
			z.Event, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RedisEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "id"
	err = en.Append(0x87, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ID)
	if err != nil {
		return
	}
	// write "pushed"
	err = en.Append(0xa6, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Pushed)
	if err != nil {
		return
	}
	// write "device"
	err = en.Append(0xa6, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Device)
	if err != nil {
		return
	}
	// write "created"
	err = en.Append(0xa7, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Created)
	if err != nil {
		return
	}
	// write "modified"
	err = en.Append(0xa8, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Modified)
	if err != nil {
		return
	}
	// write "origin"
	err = en.Append(0xa6, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Origin)
	if err != nil {
		return
	}
	// write "event"
	err = en.Append(0xa5, 0x65, 0x76, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Event)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RedisEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "id"
	o = append(o, 0x87, 0xa2, 0x69, 0x64)
	o = msgp.AppendString(o, z.ID)
	// string "pushed"
	o = append(o, 0xa6, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64)
	o = msgp.AppendInt64(o, z.Pushed)
	// string "device"
	o = append(o, 0xa6, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65)
	o = msgp.AppendString(o, z.Device)
	// string "created"
	o = append(o, 0xa7, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64)
	o = msgp.AppendInt64(o, z.Created)
	// string "modified"
	o = append(o, 0xa8, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64)
	o = msgp.AppendInt64(o, z.Modified)
	// string "origin"
	o = append(o, 0xa6, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e)
	o = msgp.AppendInt64(o, z.Origin)
	// string "event"
	o = append(o, 0xa5, 0x65, 0x76, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Event)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RedisEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "pushed":
			z.Pushed, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "device":
			z.Device, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "created":
			z.Created, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "modified":
			z.Modified, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "origin":
			z.Origin, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "event":
			z.Event, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RedisEvent) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ID) + 7 + msgp.Int64Size + 7 + msgp.StringPrefixSize + len(z.Device) + 8 + msgp.Int64Size + 9 + msgp.Int64Size + 7 + msgp.Int64Size + 6 + msgp.StringPrefixSize + len(z.Event)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RedisReading) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, err = dc.ReadString()
			if err != nil {
				return
			}
		case "pushed":
			z.Pushed, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "created":
			z.Created, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "origin":
			z.Origin, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "modified":
			z.Modified, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "device":
			z.Device, err = dc.ReadString()
			if err != nil {
				return
			}
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				return
			}
		case "value":
			z.Value, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RedisReading) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "id"
	err = en.Append(0x88, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Id)
	if err != nil {
		return
	}
	// write "pushed"
	err = en.Append(0xa6, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Pushed)
	if err != nil {
		return
	}
	// write "created"
	err = en.Append(0xa7, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Created)
	if err != nil {
		return
	}
	// write "origin"
	err = en.Append(0xa6, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Origin)
	if err != nil {
		return
	}
	// write "modified"
	err = en.Append(0xa8, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Modified)
	if err != nil {
		return
	}
	// write "device"
	err = en.Append(0xa6, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Device)
	if err != nil {
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		return
	}
	// write "value"
	err = en.Append(0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Value)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RedisReading) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "id"
	o = append(o, 0x88, 0xa2, 0x69, 0x64)
	o = msgp.AppendString(o, z.Id)
	// string "pushed"
	o = append(o, 0xa6, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64)
	o = msgp.AppendInt64(o, z.Pushed)
	// string "created"
	o = append(o, 0xa7, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64)
	o = msgp.AppendInt64(o, z.Created)
	// string "origin"
	o = append(o, 0xa6, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e)
	o = msgp.AppendInt64(o, z.Origin)
	// string "modified"
	o = append(o, 0xa8, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64)
	o = msgp.AppendInt64(o, z.Modified)
	// string "device"
	o = append(o, 0xa6, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65)
	o = msgp.AppendString(o, z.Device)
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "value"
	o = append(o, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendString(o, z.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RedisReading) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "pushed":
			z.Pushed, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "created":
			z.Created, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "origin":
			z.Origin, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "modified":
			z.Modified, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "device":
			z.Device, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "value":
			z.Value, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RedisReading) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.Id) + 7 + msgp.Int64Size + 8 + msgp.Int64Size + 7 + msgp.Int64Size + 9 + msgp.Int64Size + 7 + msgp.StringPrefixSize + len(z.Device) + 5 + msgp.StringPrefixSize + len(z.Name) + 6 + msgp.StringPrefixSize + len(z.Value)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RedisValueDescriptor) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, err = dc.ReadString()
			if err != nil {
				return
			}
		case "created":
			z.Created, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "description":
			z.Description, err = dc.ReadString()
			if err != nil {
				return
			}
		case "modified":
			z.Modified, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "origin":
			z.Origin, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				return
			}
		case "min":
			z.Min, err = dc.ReadIntf()
			if err != nil {
				return
			}
		case "max":
			z.Max, err = dc.ReadIntf()
			if err != nil {
				return
			}
		case "defaultvalue":
			z.DefaultValue, err = dc.ReadIntf()
			if err != nil {
				return
			}
		case "type":
			z.Type, err = dc.ReadString()
			if err != nil {
				return
			}
		case "uomlabel":
			z.UomLabel, err = dc.ReadString()
			if err != nil {
				return
			}
		case "formatting":
			z.Formatting, err = dc.ReadString()
			if err != nil {
				return
			}
		case "labels":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Labels) >= int(zb0002) {
				z.Labels = (z.Labels)[:zb0002]
			} else {
				z.Labels = make([]string, zb0002)
			}
			for za0001 := range z.Labels {
				z.Labels[za0001], err = dc.ReadString()
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RedisValueDescriptor) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 13
	// write "id"
	err = en.Append(0x8d, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Id)
	if err != nil {
		return
	}
	// write "created"
	err = en.Append(0xa7, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Created)
	if err != nil {
		return
	}
	// write "description"
	err = en.Append(0xab, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Description)
	if err != nil {
		return
	}
	// write "modified"
	err = en.Append(0xa8, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Modified)
	if err != nil {
		return
	}
	// write "origin"
	err = en.Append(0xa6, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Origin)
	if err != nil {
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		return
	}
	// write "min"
	err = en.Append(0xa3, 0x6d, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.Min)
	if err != nil {
		return
	}
	// write "max"
	err = en.Append(0xa3, 0x6d, 0x61, 0x78)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.Max)
	if err != nil {
		return
	}
	// write "defaultvalue"
	err = en.Append(0xac, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.DefaultValue)
	if err != nil {
		return
	}
	// write "type"
	err = en.Append(0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		return
	}
	// write "uomlabel"
	err = en.Append(0xa8, 0x75, 0x6f, 0x6d, 0x6c, 0x61, 0x62, 0x65, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.UomLabel)
	if err != nil {
		return
	}
	// write "formatting"
	err = en.Append(0xaa, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Formatting)
	if err != nil {
		return
	}
	// write "labels"
	err = en.Append(0xa6, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Labels)))
	if err != nil {
		return
	}
	for za0001 := range z.Labels {
		err = en.WriteString(z.Labels[za0001])
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RedisValueDescriptor) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 13
	// string "id"
	o = append(o, 0x8d, 0xa2, 0x69, 0x64)
	o = msgp.AppendString(o, z.Id)
	// string "created"
	o = append(o, 0xa7, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64)
	o = msgp.AppendInt64(o, z.Created)
	// string "description"
	o = append(o, 0xab, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Description)
	// string "modified"
	o = append(o, 0xa8, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64)
	o = msgp.AppendInt64(o, z.Modified)
	// string "origin"
	o = append(o, 0xa6, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e)
	o = msgp.AppendInt64(o, z.Origin)
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "min"
	o = append(o, 0xa3, 0x6d, 0x69, 0x6e)
	o, err = msgp.AppendIntf(o, z.Min)
	if err != nil {
		return
	}
	// string "max"
	o = append(o, 0xa3, 0x6d, 0x61, 0x78)
	o, err = msgp.AppendIntf(o, z.Max)
	if err != nil {
		return
	}
	// string "defaultvalue"
	o = append(o, 0xac, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65)
	o, err = msgp.AppendIntf(o, z.DefaultValue)
	if err != nil {
		return
	}
	// string "type"
	o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "uomlabel"
	o = append(o, 0xa8, 0x75, 0x6f, 0x6d, 0x6c, 0x61, 0x62, 0x65, 0x6c)
	o = msgp.AppendString(o, z.UomLabel)
	// string "formatting"
	o = append(o, 0xaa, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67)
	o = msgp.AppendString(o, z.Formatting)
	// string "labels"
	o = append(o, 0xa6, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Labels)))
	for za0001 := range z.Labels {
		o = msgp.AppendString(o, z.Labels[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RedisValueDescriptor) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "created":
			z.Created, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "description":
			z.Description, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "modified":
			z.Modified, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "origin":
			z.Origin, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "min":
			z.Min, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				return
			}
		case "max":
			z.Max, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				return
			}
		case "defaultvalue":
			z.DefaultValue, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				return
			}
		case "type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "uomlabel":
			z.UomLabel, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "formatting":
			z.Formatting, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "labels":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Labels) >= int(zb0002) {
				z.Labels = (z.Labels)[:zb0002]
			} else {
				z.Labels = make([]string, zb0002)
			}
			for za0001 := range z.Labels {
				z.Labels[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RedisValueDescriptor) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.Id) + 8 + msgp.Int64Size + 12 + msgp.StringPrefixSize + len(z.Description) + 9 + msgp.Int64Size + 7 + msgp.Int64Size + 5 + msgp.StringPrefixSize + len(z.Name) + 4 + msgp.GuessSize(z.Min) + 4 + msgp.GuessSize(z.Max) + 13 + msgp.GuessSize(z.DefaultValue) + 5 + msgp.StringPrefixSize + len(z.Type) + 9 + msgp.StringPrefixSize + len(z.UomLabel) + 11 + msgp.StringPrefixSize + len(z.Formatting) + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Labels {
		s += msgp.StringPrefixSize + len(z.Labels[za0001])
	}
	return
}
